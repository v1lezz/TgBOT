from telegram import *
from telegram.ext import *
from requests import *
import asyncio
import time
import datetime
from ics_parser import *
import os

TOKEN = open("token.txt").read()
MAIN_MENU_BUTTONS = [[KeyboardButton("üìù–ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä—å")]]

updater = Updater(TOKEN)
dispatcher = updater.dispatcher

class User:
    def __init__(self):
        self.tasks = []
        self.current_task = None
        self.events = []
        self.current_event = None

class Task:
    def __init__(self, title):
        self.title = title
        self.desc = ""
        self.reminders = []

class Reminder:
    def __init__(self, user_id, time, text):
        self.user_id = user_id
        self.time = time
        self.text = text

users = {}
reminders = []

async def remind():
    bot = Bot(TOKEN)
    global reminders
    while True:
        reminders_new = []
        for reminder in reminders:
            if time.time() >= reminder.time:
                bot.sendMessage(chat_id=reminder.user_id, text=f"‚è∞–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>{reminder.text}</b>.", parse_mode="HTML")
            else:
                reminders_new.append(reminder)
        reminders = reminders_new[:]

def startCommandHandler(update: Update, context: CallbackContext):
    if update.effective_chat.id not in users:
        users[update.effective_chat.id] = User()
    
    context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

def createTask(update: Update, context: CallbackContext):
    if update.effective_chat.id not in users:
        users[update.effective_chat.id] = User()

    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")]], resize_keyboard=True))
    
    return 3

def setTitle(update: Update, context: CallbackContext):
    if update.message.text.startswith("/"):
            buttons = MAIN_MENU_BUTTONS
            context.bot.send_message(chat_id=update.effective_chat.id, text="‚õîÔ∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º..", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            users[update.effective_chat.id].current_task = None
            return ConversationHandler.END

    for task in users[update.effective_chat.id].tasks:
        if task.title == update.message.text:
            buttons = MAIN_MENU_BUTTONS
            context.bot.send_message(chat_id=update.effective_chat.id, text="‚õîÔ∏è–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            users[update.effective_chat.id].current_task = None
            return ConversationHandler.END

    users[update.effective_chat.id].current_task = Task(update.message.text)
    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")]], resize_keyboard=True))

    return 4

def setDesc(update: Update, context: CallbackContext):
    users[update.effective_chat.id].current_task.desc = update.message.text
    users[update.effective_chat.id].tasks.append(users[update.effective_chat.id].current_task)
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: <b>{users[update.effective_chat.id].current_task.title}</b>.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True), parse_mode="HTML")
    users[update.effective_chat.id].current_task = None

    return ConversationHandler.END

def skipDesc(update: Update, context: CallbackContext):
    users[update.effective_chat.id].tasks.append(users[update.effective_chat.id].current_task)
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: <b>{users[update.effective_chat.id].current_task.title}</b>.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True), parse_mode="HTML")
    users[update.effective_chat.id].current_task = None

    return ConversationHandler.END

def cancelTaskCreation(update: Update, context: CallbackContext):
    users[update.effective_chat.id].current_task = None
    context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

    return ConversationHandler.END

def viewTasks(update: Update, context: CallbackContext):
    if update.effective_chat.id not in users:
        users[update.effective_chat.id] = User()

    buttons = [[KeyboardButton("‚úèÔ∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")]]
    for task in users[update.effective_chat.id].tasks:
        buttons.append([task.title])
    context.bot.send_message(chat_id=update.effective_chat.id, text="üìñ–í–∞—à–∏ –∑–∞–¥–∞—á–∏. /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    
    return 0

def viewTask(update: Update, context: CallbackContext):
    for task in users[update.effective_chat.id].tasks:
        if task.title == update.message.text:
            users[update.effective_chat.id].current_task = task
            buttons = [[KeyboardButton("üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")], [KeyboardButton("‚è∞–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")], [KeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")]]
            text = f"<b>{'‚Ä¢ ' + task.title}</b>"
            if task.desc != "":
                text += f"\n{task.desc}"
            if task.reminders != []:
                text += "\n\n-----"
                for reminder in task.reminders:
                    text += f"\n‚è∞–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder}"
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True), parse_mode="HTML")
            return 1
    
    context.bot.send_message(chat_id=update.effective_chat.id, text="‚õîÔ∏è–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return ConversationHandler.END


def mainMenu(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

    return ConversationHandler.END

def createTaskReminder(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="üï∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≥–æ–¥.–º–µ—Å—è—Ü.–¥–µ–Ω—å.—á–∞—Å.–º–∏–Ω—É—Ç–∞).", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üö´–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")]], resize_keyboard=True))

    return 2

def deleteTask(update: Update, context: CallbackContext):
    users[update.effective_chat.id].tasks.pop(users[update.effective_chat.id].tasks.index(users[update.effective_chat.id].current_task))
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: <b>{users[update.effective_chat.id].current_task.title}</b>.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True), parse_mode="HTML")
    users[update.effective_chat.id].current_task = None
    
    return ConversationHandler.END

def setTaskReminder(update: Update, context: CallbackContext):
    try:
        time = datetime.datetime(*[int(i) for i in update.message.text.split(".")])

        reminders.append(Reminder(update.effective_chat.id, time.timestamp(), users[update.effective_chat.id].current_task.title))

        users[update.effective_chat.id].tasks[users[update.effective_chat.id].tasks.index(users[update.effective_chat.id].current_task)].reminders.append(time)

        context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {time}.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        users[update.effective_chat.id].current_task = None
    except:
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚õîÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –í–µ—Ä–æ—è—Ç–Ω–æ, –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        users[update.effective_chat.id].current_task = None

    return ConversationHandler.END

def cancelReminderCreation(update: Update, context: CallbackContext):
    users[update.effective_chat.id].current_task = None
    context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

    return ConversationHandler.END

viewTasksConvHandler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex("üìù–ú–æ–∏ –∑–∞–¥–∞—á–∏"), viewTasks)],

    states={
        0: [CommandHandler("menu", mainMenu), MessageHandler(Filters.regex("‚úèÔ∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), createTask), MessageHandler(Filters.text, viewTask)],
        1: [CommandHandler("menu", mainMenu), MessageHandler(Filters.regex("üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é"), mainMenu), MessageHandler(Filters.regex("‚è∞–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), createTaskReminder), MessageHandler(Filters.regex("‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), deleteTask)],
        2: [MessageHandler(Filters.regex("üö´–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), cancelReminderCreation), MessageHandler(Filters.text, setTaskReminder)],
        3: [MessageHandler(Filters.regex("üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"), cancelTaskCreation), MessageHandler(Filters.text, setTitle)],
        4: [CommandHandler("skip", skipDesc), MessageHandler(Filters.regex("üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"), cancelTaskCreation), MessageHandler(Filters.text, setDesc)]
    },

    fallbacks=[]
)

def createReminder(update: Update, context: CallbackContext):
    time, text = update.message.text[8:].split()
    reminders.append(Reminder(update.effective_chat.id, datetime.datetime(*[int(i) for i in time.split(".")]).timestamp(), text))

def importCalendar(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="üìÅ–û—Ç–ø—Ä–∞–≤—å—Ç–µ .ics —Ñ–∞–π–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—è.", reply_markup=ReplyKeyboardMarkup([["üö´–û—Ç–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è"]], resize_keyboard=True))

    return 2

def icsHandler(update: Update, context: CallbackContext):
    if update.effective_chat.id not in users:
        users[update.effective_chat.id] = User()

    try:
        filename = str(update.effective_chat.id)+"_"+str(time.time())+".ics"
        context.bot.get_file(update.message.document).download(custom_path=filename)
        
        events = getEvents(filename)
        for event in events:
            start = event.start.strftime("%d.%m.%Y %H:%M")
            if event.start.strftime("%d.%m.%Y") == event.end.strftime("%d.%m.%Y"):
                end = event.end.strftime("%H:%M")
            else:
                end = event.end.strftime("%d.%m.%Y %H:%M")
            taskname = f"{start} - {end} | {event.name}"
            for user_event in users[update.effective_chat.id].events:
                if user_event.title == taskname: break
            else:
                users[update.effective_chat.id].events.append(Task(taskname))
                if event.start.timestamp() > time.time():
                    reminders.append(Reminder(update.effective_chat.id, event.start.timestamp() - 3600, taskname))

        os.remove(filename)
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    except:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚õîÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

    return ConversationHandler.END

def viewCalendar(update: Update, context: CallbackContext):
    if update.effective_chat.id not in users:
        users[update.effective_chat.id] = User()

    buttons = [["üì≤–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"]]
    for event in users[update.effective_chat.id].events:
        buttons.append([event.title])
    context.bot.send_message(chat_id=update.effective_chat.id, text="üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä—å. /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    
    return 0

def viewEvent(update: Update, context: CallbackContext):
    for event in users[update.effective_chat.id].events:
        if event.title == update.message.text:
            users[update.effective_chat.id].current_event = event
            buttons = [[KeyboardButton("üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")], [KeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")]]
            text = f"<b>{'‚Ä¢ ' + event.title}</b>"
            context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True), parse_mode="HTML")
            return 1
    
    context.bot.send_message(chat_id=update.effective_chat.id, text="‚õîÔ∏è–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return ConversationHandler.END

def deleteEvent(update: Update, context: CallbackContext):
    users[update.effective_chat.id].events.pop(users[update.effective_chat.id].events.index(users[update.effective_chat.id].current_event))
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ: <b>{users[update.effective_chat.id].current_event.title}</b>.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True), parse_mode="HTML")
    users[update.effective_chat.id].current_event = None
    
    return ConversationHandler.END

def cancelIcsImport(update: Update, context: CallbackContext):
    users[update.effective_chat.id].current_event = None
    context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ–ò–º–ø–æ—Ä—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))

    return ConversationHandler.END


viewCalendarConvHandler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex("üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä—å"), viewCalendar)],

    states={
        0: [CommandHandler("menu", mainMenu), MessageHandler(Filters.regex("üì≤–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"), importCalendar), MessageHandler(Filters.text, viewEvent)],
        1: [CommandHandler("menu", mainMenu), MessageHandler(Filters.regex("üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é"), mainMenu), MessageHandler(Filters.regex("‚ùå–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"), deleteEvent)],
        2: [MessageHandler(Filters.regex("üö´–û—Ç–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è"), cancelIcsImport), MessageHandler(Filters.document, icsHandler)]
    },

    fallbacks=[]
)

dispatcher.add_handler(CommandHandler("start", startCommandHandler))
dispatcher.add_handler(CommandHandler("remind", createReminder))
dispatcher.add_handler(viewTasksConvHandler)
dispatcher.add_handler(viewCalendarConvHandler)

updater.start_polling()
asyncio.run(remind())